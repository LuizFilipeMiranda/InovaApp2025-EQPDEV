generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/case_flow/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  password        String
  role            UserRole
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  sessions        Session[]
  assignedTickets Ticket[]  @relation("AssignedTickets")
  createdTickets  Ticket[]  @relation("CreatedTickets")
  comments        Comment[]
  chatSessions    ChatSession[]
  knowledgeArticles KnowledgeArticle[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String       @db.Text
  category    TicketCategory
  status      TicketStatus @default(NEW)
  priority    Priority     @default(MEDIUM)
  createdBy   String
  assignedTo  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  creator     User         @relation("CreatedTickets", fields: [createdBy], references: [id])
  assignee    User?        @relation("AssignedTickets", fields: [assignedTo], references: [id])
  comments    Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  ticketId  String
  userId    String
  createdAt DateTime @default(now())
  
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id])
  messages  ChatMessage[]
}

model ChatMessage {
  id            String   @id @default(cuid())
  sessionId     String
  content       String   @db.Text
  role          MessageRole
  createdAt     DateTime @default(now())
  
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADM
  TI
  SAC
  FINANCEIRO
}

enum TicketCategory {
  TI
  SAC
  FINANCEIRO
}

enum TicketStatus {
  NEW
  IN_PROGRESS
  FINISHED
  RETURNED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageRole {
  USER
  ASSISTANT
}

model KnowledgeArticle {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  sector      TicketCategory
  keywords    String[] 
  tags        String[]
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  
  creator     User     @relation(fields: [createdBy], references: [id])
}
